@startuml
[*] --> FTS_PROBE_SEGMENT
FTS_PROBE_SEGMENT -> FTS_PROBE_SUCCESS
FTS_PROBE_SEGMENT -down-> FTS_PROBE_FAIL : connect/send/receive failed
FTS_PROBE_SEGMENT : a start state for fts probe
FTS_PROBE_SEGMENT : ftsInfo

FTS_PROBE_SUCCESS -> FTS_PROBE_SEGMENT
FTS_PROBE_SUCCESS -> FTS_PROMOTE_SEGMENT
FTS_PROBE_SUCCESS --> [*]

FTS_PROBE_SUCCESS -> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_SEGMENT -down-> FTS_SYNCREP_OFF_FAIL : connect/send/receive failed
FTS_SYNCREP_OFF_SEGMENT -> FTS_SYNCREP_OFF_SUCCESS
FTS_SYNCREP_OFF_SUCCESS --> [*]
FTS_SYNCREP_OFF_FAIL -> FTS_SYNCREP_OFF_WAIT
FTS_SYNCREP_OFF_WAIT -> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_FAIL -> FTS_SYNCREP_OFF_FAIL : retry exhaused
FTS_SYNCREP_OFF_FAIL --> [*]

FTS_PROMOTE_SEGMENT -> FTS_PROMOTE_SUCCESS
FTS_PROMOTE_SUCCESS --> [*]
FTS_PROMOTE_SEGMENT -down-> FTS_PROMOTE_FAIL : connect/send/receive failed
FTS_PROMOTE_FAIL -> FTS_PROMOTE_WAIT
FTS_PROMOTE_WAIT -> FTS_PROMOTE_SEGMENT
FTS_PROMOTE_FAIL -> FTS_PROMOTE_FAIL : retry exhaused
FTS_PROMOTE_FAIL -->[*]

FTS_PROBE_FAIL --> [*]

FTS_PROBE_FAIL -> FTS_PROBE_WAIT
FTS_PROBE_FAIL -> FTS_PROMOTE_SEGMENT
FTS_PROBE_WAIT -> FTS_PROBE_SEGMENT
FTS_PROBE_FAIL -> FTS_PROBE_FAIL : retry exhaused
@enduml




@startuml
[*] --> FTS_PROBE_SEGMENT
FTS_PROBE_SEGMENT -> FTS_PROBE_SUCCESS
FTS_PROBE_SEGMENT -> FTS_PROBE_FAIL : connect/send/receive failed
FTS_PROBE_SEGMENT : a start state for fts probe
FTS_PROBE_SEGMENT : ftsInfo

FTS_PROBE_SUCCESS -down-> FTS_PROBE_SEGMENT
FTS_PROBE_SUCCESS -down-> FTS_PROMOTE_SEGMENT
FTS_PROBE_SUCCESS --> [*]

FTS_PROBE_SUCCESS -down-> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_SEGMENT -down-> FTS_SYNCREP_OFF_FAIL : connect/send/receive failed
FTS_SYNCREP_OFF_SEGMENT -> FTS_SYNCREP_OFF_SUCCESS
FTS_SYNCREP_OFF_SUCCESS --> [*]
FTS_SYNCREP_OFF_FAIL -> FTS_SYNCREP_OFF_WAIT
FTS_SYNCREP_OFF_WAIT -> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_FAIL -> FTS_SYNCREP_OFF_FAIL : retry exhaused
FTS_SYNCREP_OFF_FAIL --> [*]

FTS_PROMOTE_SEGMENT -> FTS_PROMOTE_SUCCESS
FTS_PROMOTE_SUCCESS --> [*]
FTS_PROMOTE_SEGMENT -down-> FTS_PROMOTE_FAIL : connect/send/receive failed
FTS_PROMOTE_FAIL -> FTS_PROMOTE_WAIT
FTS_PROMOTE_WAIT -> FTS_PROMOTE_SEGMENT
FTS_PROMOTE_FAIL -> FTS_PROMOTE_FAIL : retry exhaused
FTS_PROMOTE_FAIL -->[*]

FTS_PROBE_FAIL --> [*]

FTS_PROBE_FAIL -> FTS_PROBE_WAIT
FTS_PROBE_FAIL -> FTS_PROMOTE_SEGMENT
FTS_PROBE_WAIT -> FTS_PROBE_SEGMENT
FTS_PROBE_FAIL -> FTS_PROBE_FAIL : retry exhaused
@enduml



@startuml
[*] --> FTS_PROBE_SEGMENT
FTS_PROBE_SEGMENT -> StateSocket
StateSocket -> FTS_PROBE_SUCCESS
StateSocket -down-> FTS_PROBE_FAIL : connect/send/receive failed
FTS_PROBE_SEGMENT : a start state for fts probe
FTS_PROBE_SEGMENT : ftsInfo

state StateSocket {
  state "ftsConnect()" as long1
  long1 : "interact with segment by\nlibpq connection"
  [*] --> long1
  state "ftsPoll()" as long2
  long1 -down-> long2
  long2 --> ftsSend : if write ready
  long2 --> ftsReceive : if read ready
}

FTS_PROBE_SUCCESS -> FTS_PROBE_SEGMENT
FTS_PROBE_SUCCESS -> FTS_PROMOTE_SEGMENT
FTS_PROBE_SUCCESS --> [*]

FTS_PROBE_SUCCESS -down-> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_SEGMENT -> StateSocket
StateSocket -> FTS_SYNCREP_OFF_FAIL : connect/send/receive failed
FTS_SYNCREP_OFF_SEGMENT -> FTS_SYNCREP_OFF_SUCCESS
FTS_SYNCREP_OFF_SUCCESS --> [*]
FTS_SYNCREP_OFF_FAIL -down-> FTS_SYNCREP_OFF_WAIT
FTS_SYNCREP_OFF_WAIT -down-> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_FAIL -> FTS_SYNCREP_OFF_FAIL : retry exhaused
FTS_SYNCREP_OFF_FAIL --> [*]

FTS_PROMOTE_SEGMENT -> StateSocket
StateSocket -> FTS_PROMOTE_SUCCESS
FTS_PROMOTE_SUCCESS --> [*]
StateSocket -> FTS_PROMOTE_FAIL : connect/send/receive failed
FTS_PROMOTE_FAIL -down-> FTS_PROMOTE_WAIT
FTS_PROMOTE_WAIT -down-> FTS_PROMOTE_SEGMENT
FTS_PROMOTE_FAIL -> FTS_PROMOTE_FAIL : retry exhaused
FTS_PROMOTE_FAIL -->[*]

FTS_PROBE_FAIL --> [*]

FTS_PROBE_FAIL -down-> FTS_PROBE_WAIT
FTS_PROBE_FAIL -> FTS_PROMOTE_SEGMENT
FTS_PROBE_WAIT -up-> FTS_PROBE_SEGMENT
FTS_PROBE_FAIL -> FTS_PROBE_FAIL : retry exhaused
@enduml





@startuml
[*] --> FTS_PROBE_SEGMENT : init ftsInfo
FTS_PROBE_SEGMENT -> StateSocket : start probe
StateSocket -down-> FTS_PROBE_SUCCESS
StateSocket -> FTS_PROBE_FAIL : connect/send/receive failed
FTS_PROBE_SEGMENT : a start state for fts probe
FTS_PROBE_SEGMENT : ftsInfo

state "Communicate with segment\n by libpq" as StateSocket {
  state "ftsConnect()" as long1
  long1 : "create libpq connection\n with segment"
  [*] --> long1
  state "ftsPoll()" as poll
  state "update ftsInfo \nwith message" as update
  long1 -down-> poll
  poll --> ftsSend : if write ready
  poll --> ftsReceive : if read ready
  ftsReceive -down-> update
}

state "Update catalog\n gp_configuration" as UpdateConfig {

}

FTS_PROBE_SUCCESS -> FTS_PROBE_WAIT : mirror is\n down but\n retryRequested=True
FTS_PROBE_SUCCESS -> FTS_PROMOTE_SEGMENT : retry promote
FTS_PROBE_SUCCESS -> UpdateConfig : no further state
UpdateConfig --> [*]

FTS_PROBE_SUCCESS -down-> UpdateConfig : mirror is down\n,close sync
UpdateConfig -> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_SEGMENT -> StateSocket
StateSocket -> FTS_SYNCREP_OFF_FAIL : connect/send/\nreceive failed
StateSocket -> FTS_SYNCREP_OFF_SUCCESS
FTS_SYNCREP_OFF_SUCCESS --> [*]
FTS_SYNCREP_OFF_FAIL -down-> FTS_SYNCREP_OFF_WAIT : retry_count++
FTS_SYNCREP_OFF_WAIT -down-> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_FAIL -> FTS_SYNCREP_OFF_FAIL : retry \nexhaused
FTS_SYNCREP_OFF_FAIL --> [*]

FTS_PROMOTE_SEGMENT -> StateSocket
StateSocket -> FTS_PROMOTE_SUCCESS
FTS_PROMOTE_SUCCESS --> [*]
StateSocket -> FTS_PROMOTE_FAIL : connect/send/receive failed
FTS_PROMOTE_FAIL -down-> FTS_PROMOTE_WAIT : retry_count++
FTS_PROMOTE_WAIT -down-> FTS_PROMOTE_SEGMENT
FTS_PROMOTE_FAIL -> FTS_PROMOTE_FAIL : retry \nexhaused
FTS_PROMOTE_FAIL -->[*]

FTS_PROBE_FAIL --> [*] : double\n fault

FTS_PROBE_FAIL -down-> FTS_PROBE_WAIT : retry_count++
FTS_PROBE_FAIL -> UpdateConfig : primary down\n,try to promote mirror
UpdateConfig -> FTS_PROMOTE_SEGMENT
FTS_PROBE_WAIT -up-> FTS_PROBE_SEGMENT
FTS_PROBE_FAIL -> FTS_PROBE_FAIL : retry \nexhaused
@enduml




@startuml
[*] --> FTS_PROBE_SEGMENT : init ftsInfo
FTS_PROBE_SEGMENT -> StateSocket : start probe
StateSocket -down-> FTS_PROBE_SUCCESS
StateSocket -> FTS_PROBE_FAIL : connect/send/receive failed
FTS_PROBE_SEGMENT : a start state for fts probe
FTS_PROBE_SEGMENT : ftsInfo

state "Communicate with segment\n by libpq" as StateSocket {
  state "ftsConnect()" as long1
  long1 : "create libpq connection\n with segment"
  [*] --> long1
  state "ftsPoll()" as poll
  state "update ftsInfo \nwith message" as update
  long1 -down-> poll
  poll --> ftsSend : if write ready
  poll --> ftsReceive : if read ready
  ftsReceive -down-> update
}

state "Update catalog\n gp_configuration" as UpdateConfig {

}

FTS_PROBE_SUCCESS -> FTS_PROBE_WAIT : mirror is\n down but\n retryRequested=True
FTS_PROBE_SUCCESS -> FTS_PROMOTE_SEGMENT : retry promote
FTS_PROBE_SUCCESS -> UpdateConfig : no further state
UpdateConfig --> [*]

FTS_PROBE_SUCCESS -down-> UpdateConfig : mirror is down\n,close sync
UpdateConfig -[#black,bold]> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_SEGMENT -[#black]-> StateSocket
StateSocket -[#black]> FTS_SYNCREP_OFF_FAIL : connect/send/\nreceive failed
StateSocket -[#black]> FTS_SYNCREP_OFF_SUCCESS
FTS_SYNCREP_OFF_SUCCESS -[#black]-> [*]
FTS_SYNCREP_OFF_FAIL -down[#black]-> FTS_SYNCREP_OFF_WAIT : retry_count++
FTS_SYNCREP_OFF_WAIT -down[#black]-> FTS_SYNCREP_OFF_SEGMENT
FTS_SYNCREP_OFF_FAIL -[#black]> FTS_SYNCREP_OFF_FAIL : retry \nexhaused
FTS_SYNCREP_OFF_FAIL -[#black]-> [*]

FTS_PROMOTE_SEGMENT -[#blue]-> StateSocket
StateSocket -[#blue]> FTS_PROMOTE_SUCCESS
FTS_PROMOTE_SUCCESS -[#blue]-> [*]
StateSocket -[#blue]-> FTS_PROMOTE_FAIL : connect/send/receive failed
FTS_PROMOTE_FAIL -down[#blue]-> FTS_PROMOTE_WAIT : retry_count++
FTS_PROMOTE_WAIT -down[#blue]-> FTS_PROMOTE_SEGMENT
FTS_PROMOTE_FAIL -[#blue]-> FTS_PROMOTE_FAIL : retry \nexhaused
FTS_PROMOTE_FAIL -[#blue]-> [*]

FTS_PROBE_FAIL --> [*] : double\n fault

FTS_PROBE_FAIL -down-> FTS_PROBE_WAIT : retry_count++
FTS_PROBE_FAIL -> UpdateConfig : primary down\n,try to promote mirror
UpdateConfig -[#blue,bold]> FTS_PROMOTE_SEGMENT
FTS_PROBE_WAIT -up-> FTS_PROBE_SEGMENT
FTS_PROBE_FAIL -> FTS_PROBE_FAIL : retry \nexhaused
@enduml
